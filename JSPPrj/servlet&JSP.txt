서블릿/jsp

=====================================================
1. 사전 지식

http 프로토콜 

http(hypertext transfer protocol)

- 인터넷상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜.
	** 클라이언트 : 서버에 요청하는 클라이언트 소프트웨어(웹 브라우저)가 설치된 컴퓨터
uri를 이용하여 서버에 접속하고 데이터 요청

	** 서버 : 클라이언트의 요청을 받아, 요청 해석 및 응답하는 소프트웨어가 설치된 컴퓨터(Apache, nginx, IIS, lighttpd), 웹서버는 보통 표준포트인 80번 포트로 서비스


- 어떤 종류의 데이터든 전송할 수 있도록 설계

- Connectionless 방식으로 작동(서버에 연결하고, 요청해서 응답을 받으면 연결을 끊어버림)
	- 장점 : 불특정 다수에게 서비스하기 좋음
	- 단점 : 연결을 끊어비리기 때문에 클라이언트의 이전 상태를 알 수 없음
		-> 이를 해결하기 위해 cookie 등장


cookie : 클라이언트와 서버의 상태 정보를 담고 있는 정보조각

keep-alive : 연결을 바로 끊어버리는 것이 아닌 일정시간동안 패킷 교환이 없을 경우, 확인 후 연결을 끊어버리는 것.(http 1.1부터 지원..)

URI : 클라이언트 소프트웨어는 URI를 이용하여 자원의 위치를 찾음. (http와는 독립된 다른 체계)

method : 메서드는 요청의 종류를 서버에게 알려주기 위해서 사용
	GET : 정보를 요청하기 위해 사용(SELECT)
	POST : 정보를 밀어넣기 위해 사용(INSERT)
	PUT : 정보를 업데이트하기 위해 사용(UPDATE)
	DELETE : 정보를 삭제하기 위해 사용(DELETE)
	HEAD : http(헤더)정보만 요청
	OPTIONS : 웹서버가 지원하는 메서드의 종류를 요청
	TRACE : 클라이언트의 요청을 그대로 반환
	- Restful API 서버의 경우에 GET,POST,DELETE,PUT을 명시적으로 구분해야함.

=====================================================

WAS(Web Application Server) : 웹페이지는 기본적으로 코드의 형태로 저장. -> 클라이언트의 상태에 따라 정적인 페이지가 아닌 동적으로 작동할 필요가 있기 때문. 이를 웹서버에서 실행시켜 DB와 연동하여 작업할 필요가 있다. 이를 실행시키기 위한 녀석임.
(ex. Tomcat - 웹서버 + was)

Servlet : 서버 응용 프로그램(server application program)

context name(가상 경로) : 물리적으로 여러 사이트를 합쳐서 사용될 수 있도록 함

Tomcat의 Root dir의 WEB-INF는 특별한 폴더임.
-> 우리가 짠 코드들의 class를 모아놓는 폴더이며 이를 사용자가 요청했다고 주는 것도 안됨

- 이를 사용하려면 사용자가 URL과 매핑하는 과정이 필요함.


상태 유지를 위한 servlet 구현 방법
: 계산기 같은 경우 다른 페이지로 넘어가는 것이 아닌 해당 페이지에서 계속 데이터가 유지되며 값만 변경됨
: 이를 위해 크게 3가지 방법이 있음.
application, session, cookie

application 객체
 - 서블릿 컨텍스트(Context, 문맥/책갈피 : 책을 이어갈 수 있는 상태값 역할) : 서블릿들의 중간 저장소 역할

Session 객체
- application과 거의 유사하나 application 객체는 application 전체에서 사용이 가능하고, session 객체는 session 범주에서 사용이 가능하다는 의미이다.

그렇다면 session은 무엇일까?
현재 접속한 사용자라는 의미 - 사용자별로 공간이 달라진다는 것.
브라우저가 달라져도 다른 사용자로 인식한다. 근데 같은 브라우저로 새 창을 열어도 같은 세션으로 인식하게 된다. 브라우저가 프로세스가 아니라 쓰레드 개념으로 창을 띄우는 것이기 때문에 같은 프로세스가 요청하는 것이 된다.
반대로 application은 다른 기기, 다른 브라우저에서 요청해도 데이터가 저장됨.

- was는 session을 session ID를 통해 구별할 수 있다. 이러한 session ID는 각 session의 cookie에 저장이 된다.

session이 종료되어 server에 있는 데이터를 지워달라고 요청하는 함수 : invalidate()
아니면 마지막 요청 시간부터 30분 후에 자동적으로 삭제되게 된다.

cookie 객체
: session은 was에 두고 다니는 것이지만, cookie는 브라우저에 탑재된 저장소로 들고 다닐 수 있다.

즉 서버쪽에는 application, session 저장소가 있고, 브라우저에는 cookie라는 저장소가 있다.

브라우저가 was로 갈때 크게 3가지 정보를 들고 갈 수 있다.
1. Header : 브라우저에서 자동적으로 들고가는 tcp/ip정보와 헤더 정보들 - getHeader()함수를 통해 받을 수 있다.
2. 쿠키 데이터 : 중간에 있는 저장소 이다. - getCookies()함수를 통해 받을 수 있고, addCookie()를 통해 쿠키에 저장할 수도 있다.
3. 사용자 데이터 : 사용자들이 설정할 수 있는 데이터 - getParameter()로 받을 수 있다.

그렇다면 쿠키는 servlet마다 같을까? 다를까?
다르다. 모든 쿠키를 다 들고 다니기에는 브라우저가 너무 무겁고, 이상하기 때문.
그렇기에 url로 이 쿠키는 나한테, 혹은 이 범주안에 있는 servlet에 올때만 들고 와라 라는 식으로 사용될 수 있어야 한다.

이를 위해 path 옵션이 존재.

그렇다면 브라우저가 닫히게 되면 쿠키는 어떻게 될까?
기본적으로 브라우저의 생존 주기와 쿠키의 생존주기는 동일하다. 하지만 MaxAge라는 옵션을 통해 생존주기를 변경할 수 있다.

이렇게 설정이 되면 브라우저 메모리에 저장이 되다가 파일로(즉, 반 영구적으로) 저장이 되게 된다.

즉 기간이 길다 -> cookie를 사용해야 한다.